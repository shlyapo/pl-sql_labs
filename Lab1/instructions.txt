ALTER USER eliz quota unlimited on USERS;

DROP TABLE MYTABLE;

 --1
CREATE TABLE MyTable(
	id NUMBER PRIMARY KEY,
	val NUMBER NOT NULL 
);


--2
BEGIN
	FOR i IN 1 .. 10000 LOOP
		INSERT INTO MYTABLE VALUES (i, round(dbms_random.value(1,10000)));
	END LOOP;
END;


--3
CREATE OR REPLACE FUNCTION even_or_odd
RETURN VARCHAR2 IS 
results VARCHAR2(20);
count_even NUMBER := 0;
count_odd NUMBER := 0;
BEGIN
	SELECT COUNT(ID) INTO count_even FROM MYTABLE WHERE MOD(VAL,2) = 0;
	SELECT COUNT(ID) INTO count_odd FROM MYTABLE WHERE MOD(VAL,2) <> 0;
	IF(count_even > count_odd) THEN
		results := 'True';
		RETURN results;
	END IF;
	IF(count_even < count_odd) THEN
		results := 'False';
		RETURN results;
	END IF;
	IF(count_even = count_odd) THEN
		results := 'Equal';
		RETURN results;
	END IF;
END even_or_odd;


 --4
create or replace FUNCTION random_ins (row_id IN NUMBER, row_val IN NUMBER )
RETURN VARCHAR2 IS results varchar(80);
    id_val NUMBER;
    id_exist EXCEPTION;
BEGIN
	SELECT COUNT(*) INTO id_val FROM MYTABLE;
      IF id_val<row_id then
        results :=  'insert into MYTABLE (id, name) values('|| row_id ||','|| row_val ||')';
      else 
        raise id_exist;
      end if;  
     EXCEPTION
    	WHEN id_exist THEN
    	results := 'Already exist';
   return results;
END;

declare
  c varchar(80);
  begin
   c  :=  ELIZ.random_ins(100, 100);  
   dbms_output.put_line(c);  
 end;

--5
CREATE OR REPLACE PROCEDURE ELIZ.my_insert (row_id IN NUMBER, row_val IN number ) 
IS
results varchar2(20);
find NUMBER;
not_id EXCEPTION;
BEGIN
	select count(*) into  find from MYTABLE
  where ID = row_id;
  if find = 0 then
      INSERT INTO MYTABLE (val)
      VALUES (row_val);
     results := 'Successful';
  else   
     raise not_id;
  End IF;
 	EXCEPTION
 		WHEN not_id THEN
 			results := 'exist';
 dbms_output.put_line(results);  
END;

CALL ELIZ.my_insert(700, 700);


create or replace NONEDITIONABLE PROCEDURE my_update (row_id in number, row_val IN number ) 
IS 
results varchar(20);
find number;
not_id EXCEPTION;
BEGIN
  select count(*) into  find from MYTABLE
  where ID = row_id;
  if find = 1 then
      update  MYTABLE
      set val = row_val
      where ID = row_id;
     results := 'Successful';
  else   
      raise not_id;
  End IF;
 	EXCEPTION
 		WHEN not_id THEN
 			results := 'Dont exist';
 	dbms_output.put_line(results);  
end;   
  
CALL eliz.my_update(20, 200);


create or replace PROCEDURE my_delete (row_id in number ) IS
results varchar2(20);
find number;
not_id EXCEPTION;
BEGIN
      select count(*)
  into   find
  from   MYTABLE
  where id = row_id;
  if find = 1 then
      delete  MYTABLE
      where id = row_id;
     results := 'Successful';
  else   
      raise not_id;
  end if;    
 EXCEPTION
 	WHEN not_id THEN
 		results := 'Dont exist';
 dbms_output.put_line(results); 
END;

CALL eliz.my_delete(20000);


--6

CREATE OR REPLACE FUNCTION total_year(in_monthly NUMBER, percent NUMBER) 
RETURN VARCHAR2
IS
    results REAL;
    not_percent EXCEPTION;
BEGIN   
    IF percent < 0 THEN
        RAISE not_percent;        
    END IF;        
    results := (1 + (0.01)*percent)*12*in_monthly;
    RETURN  utl_lms.format_message('%d', TO_CHAR(results));

    EXCEPTION
        WHEN INVALID_NUMBER THEN
        
            RETURN 'Wrong input type';
        WHEN not_percent THEN
            RETURN utl_lms.format_message('Wrong percent');
END;


DECLARE
    res VARCHAR2(100);
   	in_mon NUMBER;
   	perc NUMBER;
BEGIN
	in_mon := 'dd';
	perc := 13;
     res :=  ELIZ.total_year(in_mon, -6); 
    dbms_output.put_line(res);
    EXCEPTION
        WHEN VALUE_ERROR  THEN
             dbms_output.put_line('Wrong input type');
END;


