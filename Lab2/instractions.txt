ALTER USER lab2 quota unlimited on USERS;

DROP TABLE lab2.students;
DROP TABLE lab2.groups;
DROP TABLE lab2.student_logs;

CREATE TABLE lab2.STUDENTS(
 ID NUMBER,
 NAME VARCHAR2(50),
 GROUP_ID NUMBER
);

CREATE TABLE lab2.GROUPS(
 ID NUMBER,
 NAME VARCHAR2(50),
 C_VAL NUMBER
);

CREATE OR REPLACE trigger LAB2.unique_id_students
 before update or insert on lab2.STUDENTS
 FOR EACH ROW
DECLARE 
	PRAGMA AUTONOMOUS_TRANSACTION;
	exist EXCEPTION;
	find NUMBER;
	BEGIN
	SELECT ID INTO find FROM LAB2.students WHERE ID = :NEW.ID;
	dbms_output.put_line('Already exist');
	raise exist;
END unique_id_students;

CREATE OR REPLACE trigger LAB2.unique_id_group
 AFTER UPDATE or insert on LAB2.GROUPS
  FOR EACH ROW
	DECLARE 
	PRAGMA AUTONOMOUS_TRANSACTION;
	find NUMBER;
	exist EXCEPTION;
	BEGIN
	SELECT COUNT(ID) INTO find FROM LAB2.GROUPS WHERE ID = :NEW.ID;
	dbms_output.put_line('Already exist');
	raise exist;
END unique_id_group;

INSERT INTO lab2.students VALUES (1, 'Liza', 2);

INSERT INTO lab2.students VALUES (1, 'Liza', 2);

INSERT INTO lab2.students VALUES (2, 'Liza', 1);

INSERT INTO lab2.groups VALUES (1, 'Sub', 0);

INSERT INTO lab2.groups VALUES (2, 'Math', 0);

INSERT INTO lab2.groups VALUES (1, 'Liza', 0);

INSERT INTO lab2.groups VALUES (1, 'Liza', 0);

CREATE OR REPLACE TRIGGER increment_id_student
BEFORE INSERT ON lab2.STUDENTS 
FOR EACH ROW 
DECLARE 
max_id NUMBER;
wrong_table EXCEPTION;
BEGIN 
	SELECT max(id) INTO max_id FROM lab2.STUDENTS;
	IF max_id IS NOT NULL THEN
		IF :NEW.id <> NULL then
			IF max_id< :NEW.id OR max_id = :NEW.id then
				dbms_output.put_line('Already exist');
				raise wrong_table;
			ELSE 
			dbms_output.put_line('Successful');
			END IF;
		else
			:NEW.ID := MAX_ID + 1;
		END IF;
	ELSE 
		:NEW.ID := 1;
	END IF;
END increment_id_student;

CREATE OR REPLACE TRIGGER increment_id_group
BEFORE INSERT ON lab2.GROUPS 
FOR EACH ROW 
DECLARE 
max_id NUMBER;
wrong_table EXCEPTION;
BEGIN 
	SELECT max(id) INTO max_id FROM lab2.GROUPS;
	IF max_id IS NOT NULL THEN
		IF :NEW.id <> NULL then
			IF max_id< :NEW.id OR max_id = :NEW.id then
				dbms_output.put_line('Already exist');
				raise wrong_table;
			ELSE 
			dbms_output.put_line('Successful');
			END IF;
		else
			:NEW.ID := MAX_ID + 1;
		END IF;
	ELSE 
		:NEW.ID := 1;
	END IF;
END increment_id_group;

INSERT INTO lab2.students (NAME, GROUP_ID) VALUES ('Sasha', 1);
INSERT INTO lab2.groups (NAME, C_VAL) VALUES ('Lang', 2);

UPDATE lab2.STUDENTS 
SET id = 2
WHERE name ='Liza';

DELETE lab2.students WHERE id =1;
UPDATE lab2.GROUPS SET name = 'Math' WHERE id=2;

CREATE OR REPLACE TRIGGER unique_name
BEFORE UPDATE OR INSERT
ON Lab2.GROUPS  FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
id_ NUMBER;
existing_name EXCEPTION;
BEGIN
    case
    when updating then
        if :NEW.Name NOT LIKE :OLD.Name then
        SELECT id INTO id_ FROM lab2.GROUPS  WHERE lab2.GROUPS.name= :NEW.name;
        dbms_output.put_line('This name already exists'||:NEW.Name);
        raise existing_name;
        end if;
    when inserting then 
        SELECT groups.id INTO id_ FROM lab2.groups WHERE groups.name=:NEW.name;
        dbms_output.put_line('An id already exists'||:NEW.Name);
        raise existing_name;
    end case;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        dbms_output.put_line('success');
END unique_name;

INSERT INTO lab2.groups (NAME, C_VAL) VALUES ('Music', 2);

UPDATE lab2.GROUPS 
SET name = 'Math'
WHERE id = 1;

CREATE OR REPLACE TRIGGER fk_groups
BEFORE INSERT OR UPDATE ON lab2.STUDENTS
FOR EACH ROW 
DECLARE 
find NUMBER;
not_exist EXCEPTION;
BEGIN 
	SELECT id INTO find FROM lab2.GROUPS WHERE id = :NEW.group_id;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('ERROR FK');
			raise not_exist;
END increment_id_group;

INSERT INTO lab2.students (NAME, GROUP_ID) VALUES ('Sasha', 10);

UPDATE groups 
SET name = ''

CREATE OR REPLACE TRIGGER fk_delete
BEFORE
DELETE ON lab2.GROUPS
FOR EACH ROW 
DECLARE 
find NUMBER;
not_exist EXCEPTION;
BEGIN 
	DELETE FROM lab2.students WHERE group_id = :OLD.id;
	dbms_output.put_line('SUCCESSFUL');
	EXCEPTION 
	WHEN not_exist THEN
	dbms_output.put_line('Not exist');
END fk_delete;

DELETE FROM lab2.GROUPS WHERE id=2;

CREATE TABLE lab2.student_logs(
id NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
log_time DATE,
log_do VARCHAR(50),
st_id NUMBER,
st_name VARCHAR(50),
st_group_id NUMBER
);

CREATE OR REPLACE TRIGGER journal_students
AFTER UPDATE OR INSERT OR DELETE
ON LAB2.STUDENTS  FOR EACH ROW
DECLARE
BEGIN
    CASE
     WHEN deleting THEN 
         INSERT INTO LAB2.student_logs (log_do, log_time, st_id, st_name, st_group_id) 
         VALUES ( 
            'delete', CURRENT_TIMESTAMP, :OLD.id, :OLD.name, :OLD.group_id);
           
        WHEN inserting THEN
            INSERT INTO LAB2.student_logs (log_do, log_time, st_id, st_name, st_group_id)
            VALUES (
            'Insert', CURRENT_TIMESTAMP, :NEW.id, :NEW.name, :NEW.group_id);
        
        WHEN updating THEN
             INSERT INTO LAB2.student_logs (log_do, log_time, st_id, st_name, st_group_id)
             VALUES (
            'Before update', CURRENT_TIMESTAMP, :OLD.id, :OLD.name, :OLD.group_id);
             INSERT INTO LAB2.student_logs (log_do, log_time, st_id, st_name, st_group_id)
             VALUES (
            'After update', CURRENT_TIMESTAMP, :NEW.id, :NEW.name, :NEW.group_id);   
    END CASE;
END;

CREATE OR REPLACE PROCEDURE LAB2.student_rollback(time_rollback_first TIMESTAMP) 
IS
CURSOR jrnl_row IS (SELECT * FROM lab2.student_logs);
wrong EXCEPTION;
s_name VARCHAR(50);
s_gr_id NUMBER;
BEGIN  
	DELETE lab2.STUDENTS;
    FOR row_value IN jrnl_row LOOP
        IF row_value.log_time < time_rollback_first THEN 
            IF row_value.log_do = 'Insert' THEN
               dbms_output.put_line('Rollback. I insert row');
                INSERT INTO lab2.students
               VALUES(row_value.st_id, row_value.st_name, row_value.st_group_id);
              CONTINUE;
             END IF;
            IF row_value.log_do = 'Delete' THEN
            dbms_output.put_line('Rollback. I delete row');
                DELETE FROM lab2.students WHERE id=row_value.st_id;
               CONTINUE;
              CONTINUE;
             END IF;
            IF row_value.log_do = 'Before update' THEN
            CONTINUE;
           END IF;
            IF row_value.log_do = 'After update' THEN
             dbms_output.put_line('Rollback update. I update row');
                UPDATE lab2.students SET 
                	name=row_value.st_name,
                	group_id=row_value.st_group_id 
                WHERE students.id=row_value.st_id;
                CONTINUE;
            END IF;
             RAISE wrong;
        ELSE
        	raise wrong;
        END IF;
    END LOOP;
   EXCEPTION
       WHEN wrong THEN
       dbms_output.put_line('WRONG!');
END;

CALL student_rollback(TO_TIMESTAMP('23.02.23 18:42:00'));

CREATE OR REPLACE TRIGGER count_student
AFTER UPDATE OR INSERT OR DELETE
ON LAB2.STUDENTS  FOR EACH ROW
DECLARE
gr_id NUMBER;
val NUMBER;
val_2 NUMBER;
BEGIN
    CASE
     WHEN deleting THEN 
     	SELECT c_val INTO val FROM lab2.GROUPS WHERE ID = :OLD.GROUP_ID;
         UPDATE LAB2.GROUPS 
         SET c_val = val-1
         WHERE id = :OLD.group_id;
     WHEN inserting THEN
        SELECT c_val INTO val FROM lab2.GROUPS WHERE ID = :NEW.GROUP_ID;
         UPDATE LAB2.GROUPS 
         SET c_val = val+1
         WHERE id = :new.GROUP_ID; 
     WHEN updating THEN
     	SELECT c_val INTO val FROM lab2.GROUPS WHERE ID = :NEW.GROUP_ID;
     	SELECT c_val INTO val_2 FROM lab2.GROUPS WHERE ID = :OLD.GROUP_ID;
         UPDATE LAB2.GROUPS 
         SET c_val = val+1
         WHERE id = :NEW.GROUP_ID;
        UPDATE LAB2.GROUPS 
         SET c_val = val_2-1
         WHERE id = :OLD.GROUP_ID;
    END CASE;
   EXCEPTION 
   WHEN NO_DATA_FOUND THEN
   dbms_output.put_line('Nothing change');
END;

UPDATE lab2.students 
SET group_id = 2
WHERE group_id = 1;
