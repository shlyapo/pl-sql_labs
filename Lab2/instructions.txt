ALTER USER lab2 quota unlimited on USERS;

CREATE TABLE lab2.STUDENTS(
	ID NUMBER,
	NAME VARCHAR2(50),
	GROUP_ID NUMBER
);

CREATE TABLE lab2.GROUPS(
	ID NUMBER,
	NAME VARCHAR2(50),
	C_VAL NUMBER
);

create or replace trigger unique_id_students
  before update or insert on lab2.STUDENTS
  FOR EACH ROW
	DECLARE 
	find NUMBER;
	exist EXCEPTION;
	BEGIN
	SELECT COUNT(ID) INTO find FROM STUDENTS WHERE ID=NEW.ID;
	IF find = 1 then
		raise exist;
	END IF;
	EXCEPTION
		WHEN exist THEN
		RAISE_APPLICATION_ERROR (
         -20001,
         'ERROR: Cannot Enter'
      );
END unique_id_students;

create or replace trigger unique_id_group
  before update or insert on lab2.GROUPS
  FOR EACH ROW
	DECLARE 
	find NUMBER;
	exist EXCEPTION;
	BEGIN
	SELECT COUNT(ID) INTO find FROM GROUPS WHERE ID=NEW.ID;
	IF find = 1 then
		raise exist;
	END IF;
	EXCEPTION
		WHEN exist THEN
		RAISE_APPLICATION_ERROR (
         -20001,
         'ERROR: Cannot Enter'
      );
END unique_id_group;

INSERT INTO lab2.students VALUES (2, 'Liza', 2);

INSERT INTO lab2.groups VALUES (1, 'Liza', 2);

CREATE OR REPLACE TRIGGER increment_id_
BEFORE INSERT ON lab2.STUDENTS 
FOR EACH ROW 
DECLARE 
max_id NUMBER;
null_table EXCEPTION;
BEGIN 
	SELECT max(id) INTO max_id FROM lab2.STUDENTS;
	:NEW.ID := MAX_ID + 1
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			:NEW.ID := 1
END increment_id_student;

CREATE OR REPLACE TRIGGER LAB2.increment_id_group
BEFORE INSERT ON lab2.GROUPS 
FOR EACH ROW 
DECLARE 
max_id NUMBER;
null_table EXCEPTION;
BEGIN 
	SELECT max(id) INTO max_id FROM lab2.GROUPS;
	:NEW.ID := MAX_ID + 1;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			:NEW.ID := 1;
END increment_id_group;

INSERT INTO lab2.students (NAME, GROUP_ID) VALUES ('Liza', 2);
INSERT INTO lab2.groups (NAME, C_VAL) VALUES ('Math', 2);

CREATE OR REPLACE TRIGGER LAB2.unique_name
BEFORE INSERT ON lab2.GROUPS 
FOR EACH ROW 
DECLARE 
find NUMBER;
exist EXCEPTION;
BEGIN 
	SELECT Count(id) INTO find FROM lab2.GROUPS WHERE name = :NEW.NAME;
	raise exist;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('Unique');
		WHEN exist THEN
		dbms_output.put_line('Already exist');
END increment_id_group;

INSERT INTO lab2.groups (NAME, C_VAL) VALUES ('Math', 2);

CREATE OR REPLACE TRIGGER LAB2.fk_groups
BEFORE INSERT OR UPDATE ON lab2.STUDENTS
FOR EACH ROW 
DECLARE 
find NUMBER;
not_exist EXCEPTION;
BEGIN 
	SELECT id INTO find FROM lab2.GROUPS WHERE id = :NEW.group_id;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			dbms_output.put_line('ERROR FK');
			raise not_exist;
END increment_id_group;

CREATE OR REPLACE TRIGGER LAB2.fk_delete
BEFORE INSERT OR UPDATE ON lab2.GROUPS
FOR EACH ROW 
DECLARE 
find NUMBER;
not_exist EXCEPTION;
BEGIN 
	DELETE FROM lab2.students WHERE group_id = :OLD.id;
END fk_delete;

CREATE TABLE student_logs(
id NUMBER PRIMARY KEY NOT NULL,
log_time DATE,
log_do VARCHAR(20),
st_id NUMBER,
st_name VARCHAR(50),
st_group_id NUMBER
);

CREATE OR REPLACE TRIGGER journal_students
AFTER UPDATE OR INSERT OR DELETE
ON LAB2.STUDENTS  FOR EACH ROW
DECLARE
 PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    CASE
     WHEN deleting THEN 
         INSERT INTO LAB2.student_logs VALUES (
            'delete', CURRENT_TIMESTAMP, :OLD.id, :OLD.name, :OLD.groupId);
           
        WHEN inserting THEN
            INSERT INTO LAB2.student_logs  VALUES (
            'Insert', CURRENT_TIMESTAMP, :NEW.id, :NEW.name, :NEW.groupId);
        
        WHEN updating THEN
             INSERT INTO LAB2.student_logs  VALUES (
            'Before update', CURRENT_TIMESTAMP, :OLD.id, :OLD.name, :OLD.groupId);
             INSERT INTO LAB2.student_logs VALUES (
            'After update', CURRENT_TIMESTAMP, :NEW.id, :NEW.name, :NEW.groupId);   
           
       
    END CASE;
END;

