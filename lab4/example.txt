CREATE TABLE LAB4.test_table(
ID NUMBER,
NAME VARCHAR2(20)
);

INSERT INTO LAB4.test_table (ID, NAME) VALUES (3, 'NN');

ALTER USER LAB4 quota unlimited ON USERS;
--scripts
DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
    ID       integer;
    NAME     VARCHAR2(20);
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "SELECT": {
                    "TABLE_NAME": "test_table",
                    "VALUES": [
                        "ID",
                        "NAME"
                    ]
                }
            }');
    DBMS_OUTPUT.PUT_LINE(JSON_PARSER.Parse_Arg(l_object));
    cur := TRY_Get_Cursor_By(l_object);
    LOOP
        FETCH cur INTO ID, NAME;
        EXIT WHEN cur%notfound;
        DBMS_OUTPUT.put_line(ID || ' ' || NAME);
    END LOOP;
    close cur;
END;



DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
    ID       integer;
    VAL      VARCHAR2(20);
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "SELECT": {
                    "TABLE_NAME": "test_table",
                    "VALUES": [
                        "id",
                        "name"
                    ],
                    "WHERE": [
                        {
                            "LHS": "id",
                            "RHS": {
                                "TYPE": "INTEGER",
                                "VALUE": 5
                            },
                            "OPERATOR": "="
                        },
                        {
                            "SEPARATOR": "OR"
                        },
                        {
                            "OPERATOR": "EXISTS",
                            "RHS": {
                                "SELECT": {
                                    "TABLE_NAME": "test_table",
                                    "VALUES": [
                                        "NAME"
                                    ],
                                    "WHERE": [
                                        {
                                            "LHS": "NAME",
                                            "RHS": [
                                                {
                                                    "TYPE": "VARCHAR2",
                                                    "VALUE": "check"
                                                },
                                                {
                                                    "TYPE": "VARCHAR2",
                                                    "VALUE": "bruh"
                                                }
                                            ],
                                            "OPERATOR": "IN"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }');
    DBMS_OUTPUT.PUT_LINE(JSON_PARSER.Parse_Arg(l_object));
    cur := TRY_Get_Cursor_By(l_object);
    LOOP
        FETCH cur INTO ID, VAL;
        EXIT WHEN cur%notfound;
        DBMS_OUTPUT.put_line(ID || ' ' || val);
    END LOOP;
    close cur;
END;

DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
        "INSERT": {
            "TABLE_NAME": "test_table",
            "VALUES": {
                "NAME": {
                    "VALUE": "check",
                    "TYPE": "VARCHAR2"
                }
            }
        }
    }');
    DBMS_OUTPUT.PUT_LINE(JSON_PARSER.Parse_Arg(l_object));
    cur := Try_Get_Cursor_By(l_object);
    close cur;
END;


DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "UPDATE": {
                    "TABLE_NAME": "test_table",
                    "VALUES": [
                        {
                            "LHS": "NAME",
                            "RHS": {
                                "VALUE": "BRUH",
                                "TYPE": "VARCHAR2"
                            }
                        }
                    ],
                    "WHERE":[
                        {
                            "LHS": "ID",
                            "RHS": {
                                "VALUE": 1,
                                "TYPE": "INTEGER"
                            },
                            "OPERATOR": "="
                        }
                    ]
                }
            }');
    cur := Try_Get_Cursor_By(l_object);
    close cur;
END;

CREATE TABLE LAB4.MyTable
(
id NUMBER,
dd varchar2(20)
);

DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "DELETE": {
                    "TABLE_NAME": "MyTable"
                }
            }');
    DBMS_OUTPUT.PUT_LINE('check');
    cur := Try_Get_Cursor_By(l_object);
    close cur;
END;


DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "START":[
                    {
                        "CREATE": {
                            "TYPE": "TABLE",
                            "VALUES": {
                                "NAME": "test_table",
                                "COLUMS": [
                                    {
                                        "NAME": "ID",
                                        "TYPE": "INTEGER",
                                        "OTHER": [
                                            "NOT NULL"
                                        ]
                                    },
                                    {
                                        "NAME": "NAME",
                                        "TYPE": "VARCHAR(20)"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "CREATE": {
                            "TYPE": "SEQUENCE",
                            "VALUES": {
                                "NAME": "test_table_seq"
                            }
                        }
                    },
                    {
                        "CREATE": {
                            "TYPE": "TRIGGER",
                            "VALUES": {
                                "NAME": "test_table_trigger",
                                "TYPE_WHEN": "Before",
                                "EVENT": "insert",
                                "TABLE_NAME": "test_table",
                                "OTHER_OPTIONS": [
                                    "FOR EACH ROW"
                                ],
                            "DO": [
                                {
                                    "SELECT": {
                                        "TABLE_NAME": "dual",
                                        "VALUES": [
                                            "test_table_seq.NEXTVAL"
                                        ],
                                        "INTO": [
                                            ":new.id"
                                        ]
                                    }
                                }
                            ]
                            }
                        }
                    }
                ]
            }');
    DBMS_OUTPUT.PUT_LINE('check');
    cur := Try_Get_Cursor_By(l_object);
    close cur;
END;

DECLARE
    l_object JSON_OBJECT_T;
    cur      SYS_REFCURSOR;
BEGIN
    l_object := JSON_OBJECT_T.Parse(
            '{
                "START":[
                    {
                        "DROP": {
                            "TYPE": "TRIGGER",
                            "VALUES": {
                                "NAME": "test_table_trigger"
                            }
                        }
                    },
                    {
                        "DROP": {
                            "TYPE": "TABLE",
                            "VALUES": {
                                "NAME": "test_table"
                            }
                        }
                    },
                    {
                        "DROP": {
                            "TYPE": "SEQUENCE",
                            "VALUES": {
                                "NAME": "test_table_seq"
                            }
                        }
                    }
                ]
            }');
    cur := Try_Get_Cursor_By(l_object);
    close cur;
END;

--cursor
CREATE OR REPLACE TYPE clobs_array IS TABLE OF CLOB;

CREATE OR REPLACE FUNCTION DO_PARSE(l_object JSON_OBJECT_T) RETURN clobs_array
    IS
    l_array   json_array_t;
    str_array clobs_array := clobs_array();
    counter   integer;
BEGIN
    IF l_object.has('START') = TRUE THEN
        l_array := l_object.get_array('START');
        FOR counter in 0..(l_array.get_size() - 1)
            LOOP
                str_array.extend();
                str_array(str_array.COUNT) := JSON_PARSER.Parse_Arg(l_array.get(counter));
            END LOOP;
    ELSE
        str_array.extend();
        str_array(str_array.COUNT) := JSON_PARSER.Parse_Arg(l_object);
    END IF;
    return str_array;
END;

CREATE OR REPLACE FUNCTION Get_Cursor_By(l_object JSON_OBJECT_T) RETURN SYS_REFCURSOR
    IS
    res_cur   SYS_REFCURSOR;
    str_array clobs_array;
    counter   integer;
BEGIN
    str_array := DO_PARSE(l_object);
    FOR counter in 1..str_array.COUNT
        LOOP
            OPEN res_cur for str_array(counter);
        END LOOP;
    return res_cur;
END;

CREATE OR REPLACE PROCEDURE Invoke_By(l_object JSON_OBJECT_T)
    IS
    str_array clobs_array;
    counter   integer;
BEGIN
    str_array := DO_PARSE(l_object);
    FOR counter in 1..str_array.COUNT
        LOOP
            EXECUTE IMMEDIATE str_array(counter);
        END LOOP;
END;


CREATE OR REPLACE FUNCTION Try_Get_Cursor_By(l_object JSON_OBJECT_T) RETURN SYS_REFCURSOR
    IS
    res SYS_REFCURSOR;
BEGIN
    res := Get_Cursor_By(l_object);
    return res;
EXCEPTION
    WHEN OTHERS THEN
        Invoke_By(l_object);
        OPEN res FOR
            select * from dual where 1 = 2;
        return res;
END;